import java.io.*;
import java.math.*;
import java.util.*;

public class A {
	public static void main(String[] args) {
		Main.main(args);
	}

	// import java.io.*; import java.math.*; import java.util.*;

	static class Main {

		static String[] numbers = {
				"33676827594484243897647456005000654391916198809258469939943944255181290307214900224081949924583571472291837988649753193941836723828323234739062471943155785513806039500165527193278093329582759905765533802187573309212464055383301491935363862833615950970780658118090418340475522138153859087121701561568296751826571113427262336853480895011970552039185326239496042803106285328198624380944537003185235736096046992680891830197061490109937833490419136188999442576576769103890995893380022607743740081787109376",
				"66323172405515756102352543994999345608083801190741530060056055744818709692785099775918050075416428527708162011350246806058163276171676765260937528056844214486193960499834472806721906670417240094234466197812426690787535944616698508064636137166384049029219341881909581659524477861846140912878298438431703248173428886572737663146519104988029447960814673760503957196893714671801375619055462996814764263903953007319108169802938509890062166509580863811000557423423230896109004106619977392256259918212890625" };

		static int[] MASKS = { 0, 0, 0x1080, 0x10008, 0x200, 0x80000, 0x40002,
				0x1080, 0x900, 0x1080, 0x40002, 0x900, 0x80000, 0x80000,
				0x8010, 0x1080, 0x10008, 0x8010, 0x1080, 0x1080, 0x80000,
				0x2040, 0x20004, 0x20004, 0x80000, 0x80000, 0x900, 0x10008,
				0x10008, 0x200, 0x900, 0x4020, 0x200, 0x200, 0x80000, 0x200,
				0x900, 0x10008, 0x80000, 0x40002, 0x200, 0x2040, 0x1080,
				0x2040, 0x1080, 0x4020, 0x2040, 0x1080, 0x4020, 0x20004,
				0x8010, 0x8010, 0x200, 0x200, 0x200, 0x900, 0x900, 0x40002,
				0x2040, 0x10008, 0x40002, 0x200, 0x40002, 0x8010, 0x80000,
				0x200, 0x8010, 0x10008, 0x10008, 0x900, 0x1080, 0x10008, 0x200,
				0x200, 0x80000, 0x40002, 0x80000, 0x200, 0x8010, 0x40002,
				0x2040, 0x80000, 0x1080, 0x200, 0x40002, 0x80000, 0x10008,
				0x900, 0x40002, 0x200, 0x900, 0x80000, 0x900, 0x2040, 0x20004,
				0x200, 0x200, 0x2040, 0x8010, 0x80000, 0x2040, 0x200, 0x80000,
				0x2040, 0x10008, 0x1080, 0x4020, 0x10008, 0x20004, 0x4020,
				0x900, 0x40002, 0x10008, 0x80000, 0x80000, 0x1080, 0x10008,
				0x4020, 0x8010, 0x8010, 0x200, 0x80000, 0x900, 0x10008, 0x8010,
				0x20004, 0x2040, 0x900, 0x200, 0x40002, 0x900, 0x20004,
				0x10008, 0x4020, 0x900, 0x20004, 0x2040, 0x80000, 0x40002,
				0x10008, 0x80000, 0x900, 0x20004, 0x8010, 0x80000, 0x2040,
				0x200, 0x8010, 0x200, 0x10008, 0x20004, 0x2040, 0x20004,
				0x10008, 0x4020, 0x900, 0x40002, 0x200, 0x10008, 0x80000,
				0x20004, 0x4020, 0x4020, 0x80000, 0x1080, 0x200, 0x40002,
				0x40002, 0x80000, 0x4020, 0x200, 0x900, 0x80000, 0x900, 0x8010,
				0x10008, 0x4020, 0x900, 0x2040, 0x10008, 0x10008, 0x20004,
				0x2040, 0x20004, 0x1080, 0x20004, 0x8010, 0x10008, 0x40002,
				0x40002, 0x40002, 0x1080, 0x4020, 0x2040, 0x20004, 0x900,
				0x40002, 0x4020, 0x1080, 0x2040, 0x200, 0x20004, 0x900, 0x2040,
				0x4020, 0x40002, 0x2040, 0x4020, 0x40002, 0x80000, 0x1080,
				0x40002, 0x20004, 0x40002, 0x1080, 0x900, 0x80000, 0x200,
				0x4020, 0x900, 0x10008, 0x4020, 0x40002, 0x900, 0x10008,
				0x40002, 0x20004, 0x20004, 0x4020, 0x4020, 0x1080, 0x8010,
				0x80000, 0x8010, 0x10008, 0x900, 0x40002, 0x8010, 0x80000,
				0x200, 0x80000, 0x900, 0x40002, 0x40002, 0x900, 0x4020, 0x2040,
				0x80000, 0x900, 0x1080, 0x80000, 0x1080, 0x200, 0x80000,
				0x4020, 0x200, 0x4020, 0x40002, 0x2040, 0x10008, 0x10008,
				0x900, 0x20004, 0x2040, 0x900, 0x10008, 0x2040, 0x10008,
				0x4020, 0x10008, 0x200, 0x40002, 0x200, 0x8010, 0x40002,
				0x80000, 0x10008, 0x10008, 0x900, 0x10008, 0x4020, 0x4020,
				0x80000, 0x8010, 0x2040, 0x8010, 0x20004, 0x40002, 0x20004,
				0x200, 0x80000, 0x10008, 0x10008, 0x1080, 0x4020, 0x1080,
				0x900, 0x40002, 0x20004, 0x80000, 0x900, 0x10008, 0x10008,
				0x4020, 0x4020, 0x2040, 0x1080, 0x4020, 0x80000, 0x200, 0x200,
				0x4020, 0x1080, 0x20004, 0x900, 0x4020, 0x200, 0x20004,
				0x10008, 0x10008, 0x200, 0x80000, 0x900, 0x1080, 0x20004,
				0x10008, 0x200, 0x40002, 0x1080, 0x20004, 0x4020, 0x4020,
				0x2040, 0x40002, 0x80000, 0x80000, 0x4020, 0x200, 0x10008,
				0x80000, 0x2040, 0x80000, 0x900, 0x10008, 0x40002, 0x4020,
				0x4020, 0x900, 0x1080, 0x4020, 0x4020, 0x40002, 0x10008,
				0x8010, 0x200, 0x40002, 0x1080, 0x8010, 0x20004, 0x2040,
				0x80000, 0x200, 0x10008, 0x1080, 0x8010, 0x10008, 0x20004,
				0x10008, 0x20004, 0x10008, 0x900, 0x20004, 0x900, 0x10008,
				0x20004, 0x1080, 0x2040, 0x10008, 0x900, 0x40002, 0x8010,
				0x200, 0x10008, 0x200, 0x40002, 0x10008, 0x4020, 0x1080, 0x200,
				0x8010, 0x2040, 0x900, 0x900, 0x200, 0x1080, 0x10008, 0x900,
				0x40002, 0x200, 0x20004, 0x20004, 0x1080, 0x8010, 0x40002,
				0x1080, 0x4020, 0x10008, 0x900, 0x4020, 0x8010, 0x20004, 0x200,
				0x200, 0x8010, 0x200, 0x40002, 0x900, 0x80000, 0x8010, 0x20004,
				0x20004, 0x80000, 0x80000, 0x200, 0x8010, 0x40002, 0x20004,
				0x1080, 0x80000, 0x10008, 0x80000, 0x200, 0x20004, 0x40002,
				0x900, 0x40002, 0x4020, 0x4020, 0x20004, 0x8010, 0x8010, 0x200,
				0x10008, 0x8010, 0x200, 0x200, 0x10008, 0x200, 0x200, 0x2040,
				0x8010, 0x900, 0x4020, 0x20004, 0x200, 0x80000, 0x900, 0x900,
				0x200, 0x40002, 0x2040, 0x40002, 0x200, 0x40002, 0x200,
				0x10008, 0x8010, 0x4020, 0x2040, 0x80000, 0x80000, 0x80000,
				0x4020, 0x80000, 0x80000, 0x2040, 0x4020, 0x8010, 0x1080,
				0x8010, 0x2040, 0x1080, 0x200, 0x900, 0x10008, 0x8010, 0x20004,
				0x8010, 0x900, 0x8010, 0x8010, 0x200, 0x4020, 0x1080, 0x20004,
				0x900, 0x2040, 0x1080, 0x2040, 0x10008, 0x10008, };

		void solve() {
			int t = nextInt();
			for (int i = 0; i < t; i++) {
				int n = nextInt();
				String[] answer = solve(n);
				Arrays.sort(answer);
				out.print("Case #" + (i + 1) + ":");
				for (String s : answer) {
					out.print(" " + s);
				}
				out.println();
			}
		}

		static int solve2(int n) {
			int shift = 0;
			int ret = 0;
			for (String e : numbers) {
				e = e.substring(e.length() - n + 1, e.length());
				for (int j = 1; j < 10; j++) {
					String number = j + e;
					BigInteger d = new BigInteger(number);
					String f = d.multiply(d).toString();
					if (f.substring(f.length() - number.length(), f.length())
							.equals(number)) {
						ret |= (1 << j + shift);
					}
				}
				shift += 10;
			}
			return ret;
		}

		static String[] solve(int n) {
			if (n == 1) {
				return new String[] { "0", "1", "5", "6" };
			}
			ArrayList<String> ans = new ArrayList<String>();
			int shift = 0;
			for (String e : numbers) {
				e = e.substring(e.length() - n + 1, e.length());
				for (int j = 1; j < 10; j++) {
					if (((MASKS[n] >> j + shift) & 1) == 1) {
						ans.add(j + e);
					}
				}
				shift += 10;
			}
			return ans.toArray(new String[ans.size()]);
		}

		InputReader sc;
		PrintWriter out;

		public void run() {
			try {
				File inputFile = new File("input.txt");
				if (inputFile.canRead()) {
					System.setIn(new FileInputStream(inputFile));
					System.setOut(new PrintStream("output.txt"));
				}
				sc = new StreamInputReader(System.in);
				out = new PrintWriter(System.out);
				solve();
				sc.close();
				out.close();
			} catch (Throwable e) {
				e.printStackTrace();
				System.exit(1);
			}
		}

		double nextDouble() {
			return Double.parseDouble(sc.next());
		}

		int nextInt() {
			return sc.nextInt();
		}

		static abstract class InputReader {
			private boolean finished = false;

			public abstract int read();

			public int nextInt() {
				int c = read();
				while (c <= 32 && c >= 0) {
					c = read();
				}
				if (c == -1) {
					finished = true;
					return Integer.MIN_VALUE;
				}
				int sgn = 1;
				if (c == '-') {
					sgn = -1;
					c = read();
				}
				if (c < '0' || c > '9') {
					throw new NumberFormatException("digit expected "
							+ (char) c + " found");
				}
				int ret = 0;
				while (c >= '0' && c <= '9') {
					ret = ret * 10 + c - '0';
					c = read();
				}
				if (c > 32) {
					throw new NumberFormatException("space character expected "
							+ (char) c + " found");
				}
				return ret * sgn;
			}

			public String next() {
				int c = read();
				while (c <= 32 && c >= 0) {
					c = read();
				}
				if (c == -1) {
					finished = true;
					return null;
				}
				StringBuilder res = new StringBuilder();
				while (c > 32) {
					res.appendCodePoint(c);
					c = read();
				}
				return res.toString();
			}

			public boolean isFinished() {
				return finished;
			}

			public void setFinished(boolean finished) {
				this.finished = finished;
			}

			public abstract void close();
		}

		static class StreamInputReader extends InputReader {
			private InputStream stream;
			private byte[] buf;
			private int current, numOfChars;

			public StreamInputReader(InputStream stream) {
				this(stream, 1024);
			}

			public StreamInputReader(InputStream stream, int bufSize) {
				this.stream = stream;
				buf = new byte[bufSize];
			}

			public int read() {
				if (numOfChars == -1) {
					return -1;
				}
				if (current >= numOfChars) {
					current = 0;
					try {
						numOfChars = stream.read(buf);
					} catch (IOException e) {
						return -1;
					}
					if (numOfChars <= 0) {
						return -1;
					}
				}
				return buf[current++];
			}

			@Override
			public void close() {
				try {
					stream.close();
				} catch (IOException ignored) {

				}
			}
		}

		public static void main(String[] args) {
			new Main().run();
		}
	}

}