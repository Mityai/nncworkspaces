package mypackage;

import arrayutils.ArrayUtils;
import niyazio.FastScanner;
import niyazio.FastPrinter;

import java.util.ArrayList;
import java.util.List;

public class Young {

    static int n;

    static long[] ANSWER = {0,
            1,
            2,
            4,
            6,
            9,
            13,
            18,
            25,
            32,
            41,
            55,
            74,
            93,
            117,
            144,
            180,
            229,
            285,
            355,
            427,
            521,
            632,
            773,
            914,
            1124,
            1340,
            1620,
            1934,
            2350,
            2768,
            3261,
            3754,
            4413,
            5230,
            6223,
            7479,
            8786,
            10323,
            11860,
            13710,
            15924,
            18313,
            21313,
            24897,
            28812,
            33785,
            38758,
            44593,
            51253,
            58926,
            67854,
            78402,
            89549,
            102286,
            115946,
            131481,
            149040,
            170652,
            195787,
            223705,
            256159,
            292241,
            333419,
            376734,
            426575,
            482175,
            546031,
            609887,
            681223,
            763217,
            861527,
            979169,
            1116124,
            1258089,
            1423437,
            1604967,
            1816080,
            2027193,
            2262881,
            2506145,
            2820234,
            3149134,
            3507733,
            3918068,
            4418444,
            4923068,
            5485391,
            6171169,
            6885083,
            7681683,
            8495787,
            9474004,
            10572785,
            11771283,
            13028133,
            14634309,
            16296994,
            18148771,
            20000548,
            22121100};

    static int[][] ARRAYS = {{},
            {1,},
            {1, 1,},
            {2, 1,},
            {2, 1, 1,},
            {3, 1, 1,},
            {3, 2, 1,},
            {3, 2, 1, 1,},
            {4, 2, 1, 1,},
            {4, 2, 1, 1, 1,},
            {4, 2, 2, 1, 1,},
            {4, 3, 2, 1, 1,},
            {5, 3, 2, 1, 1,},
            {5, 3, 2, 1, 1, 1,},
            {6, 3, 2, 1, 1, 1,},
            {6, 3, 2, 2, 1, 1,},
            {6, 4, 2, 2, 1, 1,},
            {6, 4, 3, 2, 1, 1,},
            {6, 4, 3, 2, 1, 1, 1,},
            {7, 4, 3, 2, 1, 1, 1,},
            {7, 4, 3, 2, 2, 1, 1,},
            {7, 4, 3, 2, 2, 1, 1, 1,},
            {7, 5, 3, 2, 2, 1, 1, 1,},
            {8, 5, 3, 2, 2, 1, 1, 1,},
            {8, 5, 3, 2, 2, 1, 1, 1, 1,},
            {8, 5, 4, 3, 2, 1, 1, 1,},
            {8, 5, 4, 3, 2, 1, 1, 1, 1,},
            {8, 5, 4, 3, 2, 2, 1, 1, 1,},
            {9, 5, 4, 3, 2, 2, 1, 1, 1,},
            {9, 6, 4, 3, 2, 2, 1, 1, 1,},
            {9, 6, 4, 3, 2, 2, 1, 1, 1, 1,},
            {10, 6, 4, 3, 2, 2, 1, 1, 1, 1,},
            {10, 6, 4, 3, 2, 2, 1, 1, 1, 1, 1,},
            {10, 6, 4, 3, 3, 2, 2, 1, 1, 1,},
            {9, 6, 5, 4, 3, 2, 2, 1, 1, 1,},
            {10, 6, 5, 4, 3, 2, 2, 1, 1, 1,},
            {10, 7, 5, 4, 3, 2, 2, 1, 1, 1,},
            {10, 7, 5, 4, 3, 2, 2, 1, 1, 1, 1,},
            {11, 7, 5, 4, 3, 2, 2, 1, 1, 1, 1,},
            {11, 7, 5, 4, 3, 2, 2, 1, 1, 1, 1, 1,},
            {11, 7, 5, 4, 3, 2, 2, 2, 1, 1, 1, 1,},
            {11, 7, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1,},
            {12, 7, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1,},
            {11, 8, 6, 4, 3, 3, 2, 2, 1, 1, 1, 1,},
            {12, 8, 6, 4, 3, 3, 2, 2, 1, 1, 1, 1,},
            {11, 8, 6, 5, 4, 3, 2, 2, 1, 1, 1, 1,},
            {12, 8, 6, 5, 4, 3, 2, 2, 1, 1, 1, 1,},
            {12, 8, 6, 5, 4, 3, 2, 2, 1, 1, 1, 1, 1,},
            {12, 8, 6, 5, 4, 3, 2, 2, 2, 1, 1, 1, 1,},
            {12, 8, 6, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1,},
            {13, 9, 6, 5, 4, 3, 2, 2, 2, 1, 1, 1, 1,},
            {13, 9, 6, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1,},
            {13, 9, 7, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1,},
            {13, 9, 7, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1, 1,},
            {14, 9, 7, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1, 1,},
            {14, 9, 7, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1,},
            {14, 10, 7, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1,},
            {14, 10, 7, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {14, 9, 7, 6, 5, 4, 3, 2, 2, 2, 1, 1, 1, 1,},
            {14, 10, 7, 6, 5, 4, 3, 2, 2, 2, 1, 1, 1, 1,},
            {14, 10, 7, 6, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1,},
            {14, 10, 8, 6, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1,},
            {14, 10, 8, 6, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1, 1,},
            {15, 10, 8, 6, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1, 1,},
            {15, 10, 8, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1,},
            {15, 10, 8, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {15, 11, 8, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {16, 11, 8, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {16, 11, 8, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {17, 11, 8, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {16, 11, 8, 6, 5, 4, 4, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1,},
            {16, 11, 8, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {15, 11, 9, 7, 6, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1, 1,},
            {16, 11, 9, 7, 6, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1, 1,},
            {16, 11, 9, 7, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1,},
            {16, 11, 9, 7, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {16, 12, 9, 7, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {17, 12, 9, 7, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {17, 12, 9, 7, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {18, 12, 9, 7, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {18, 12, 9, 7, 6, 5, 4, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1,},
            {17, 12, 9, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {18, 12, 9, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {18, 12, 9, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {18, 12, 10, 8, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {18, 13, 10, 8, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {18, 13, 10, 8, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {19, 13, 10, 8, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {18, 13, 10, 8, 7, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {18, 13, 10, 8, 7, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {19, 13, 10, 8, 7, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {19, 13, 10, 8, 7, 6, 5, 4, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1,},
            {18, 13, 10, 8, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {19, 13, 10, 8, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {19, 13, 10, 8, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {19, 14, 10, 8, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {19, 14, 11, 9, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1,},
            {19, 14, 11, 9, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {20, 14, 11, 9, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1,},
            {20, 14, 11, 9, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,},
            {20, 14, 11, 9, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,}};

    static final int MAXN = 101;

    public void solve(int testNumber, FastScanner in, FastPrinter out) {
        int n = in.nextInt();
        out.println(ANSWER[n]);
        out.printArray(ARRAYS[n]);
    }

    static void go(int n, int last) {
        if (last == 0) {
            return;
        }
        if (n == 0) {
            doTheList();
            return;
        }
        go(n, last - 1);
        if (n >= last) {
            p[size++] = last;
            go(n - last, last);
            --size;
        }
    }

    static long[] best;
    static int[][] answer;
    static long[][] dp = new long[MAXN][MAXN];
    static int[] p = new int[MAXN];
    static int size;

    static void doTheList() {
        int all = p[0];
        dp[0][size - 1] = 1;
        for (int i = 1; i <= all; i++) {
            dp[i][size - 1] = dp[i - 1][size - 1];
            if (i <= p[size - 1]) {
                dp[i][size - 1]++;
            }
        }
        for (int i = size - 2; i >= 0; i--) {
            dp[0][i] = 1;
            for (int j = 1; j <= all; j++) {
                long[] dpj = dp[j];
                dpj[i] = dp[j - 1][i];
                if (j <= p[i]) {
                    dpj[i] += dpj[i + 1];
                }
            }
        }
        long got = dp[all][0] - 1;
        if (best[n] < got) {
            best[n] = got;
            answer[n] = new int[size];
            for (int i = 0; i < size; i++) {
                answer[n][i] = p[i];
            }
        }
    }
}
